# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zUe053zjURb7HgzQ2-7gBmhkay2GpHmm
"""

#Importing the necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Loading both dataset
train_data = pd.read_csv('/content/train.csv')
test_data = pd.read_csv('/content/test.csv')

#Combining the two datasets to form one complete dataframe for data cleaning process
df = pd.concat([train_data,test_data],ignore_index=True)
df

#Previewing the whole data set to get a glimpse of the columns and rows
print(df.to_string())

#Removing duplicates
df=df.drop_duplicates()
df

#dropping columns that are not necessary when performing data cleaning.
df=df.drop(columns=['Ticket','Cabin'])
df

# Stanadardizing the column name to a more neater look.
# Split the 'Name' column into two new columns: 'Surname' and 'OfficialName'
df[['Surname','OfficialName',]] = df['Name'].str.split(',',expand=True)
df

#Dropping the column 'Name'
df=df.drop(columns=['Name'])
df

#Checking the sum of null values in each column
df.isnull().sum()

#Dropping null values in each column throughout the dataframe
df=df.dropna(subset=['Survived','Age','Fare','Embarked'])

#Reseting the index for the dataframe
df=df.reset_index(drop=True)
df

#Performing Exploratory Data Analysis
#Getting to know the summary statistics characteristics of our dataframe
df.describe()

#Total number of people who were on board
count_of_people=df['PassengerId'].count()
print('Total number of people: ',count_of_people)

#Knowing the number of survivors and those that died.
total_survived=df['Survived'].value_counts()[1]
total_dead=df['Survived'].value_counts()[0]
print('Total Survived: ',total_survived)
print('Total Dead: ',total_dead)

#Total revenue collected by the Travelling agency
total_revenue=df['Fare'].sum()
print('Total Revenue: ',total_revenue)

#The average age of people on board
average_age=df['Age'].mean()

#Classifying age
def age_classification(age):
  if age < 18:
    return 'child'
  elif 18 <= age < 35:
    return 'youth'
  else :
    return 'adult'
#Applying the classification
df['population_type']  = df['Age'].apply(age_classification)

print('Average Age: ',average_age,',thus the type of population on board was majorly the:',df['population_type'].iloc[0])

#Performing data visualisation
#Plotting pie charts by grouping the data into two(by SUrvived and by Sex)
# Calculate the number of survivors grouped by Sex
survival_by_Sex = df.groupby(['Sex', 'Survived']).size().unstack(fill_value=0)

# Plotting a pie chart for survivors grouped by Sex
Sex_survival_pie = survival_by_Sex[1]  # Extract survivors (1)
Sex_death_pie = survival_by_Sex[0]  # Extract deaths (0)

# Plot pie chart
plt.figure(figsize=(6, 6))
plt.pie(Sex_survival_pie, labels=Sex_survival_pie.index, autopct='%1.1f%%', startangle=90, colors=['#66b3ff', '#99ff99'])
plt.title('Survivors Grouped by Sex')
plt.show()

# Also can plot the pie chart for deaths if needed
plt.figure(figsize=(6, 6))
plt.pie(Sex_death_pie, labels=Sex_death_pie.index, autopct='%1.1f%%', startangle=90, colors=['#ff6666', '#ffcc99'])
plt.title('Deaths Grouped by Sex')
plt.show()

#Showing amount of Fare collected from each Sex
# Calculate total Fare by Sex
Fare_by_Sex = df.groupby('Sex')['Fare'].sum()

# Plotting the bar graph
plt.figure(figsize=(8, 6))
Fare_by_Sex.plot(kind='bar', color=['#66b3ff', '#ff99cc'], edgecolor='black')

# Adding labels and title
plt.title('Total Fare Collected by Sex')
plt.xlabel('Sex')
plt.ylabel('Total Fare')
plt.xticks(rotation=0)  # Rotate x-axis labels to make them horizontal
plt.tight_layout()  # To ensure the labels fit well

# Show the plot
plt.show()

#Showing the station that had the most numnber of bookings.
#Calculating number of people by port of embarkation
Customer_by_port_of_embarkation = df.groupby('Embarked')['PassengerId'].count()

# Plotting the bar graph
plt.figure(figsize=(8, 6))
Customer_by_port_of_embarkation.plot(kind='bar', color=['#66b3ff', '#ff99cc','#99ff99'], edgecolor='black')

# Adding labels and title
plt.title('Count of passengers by Port')
plt.xlabel('Port')
plt.ylabel('Count of passengers')
plt.xticks(rotation=0)  # Rotate x-axis labels to make them horizontal
plt.tight_layout()  # To ensure the labels fit well

# Show the plot
plt.show()

#Plotting histograms for the numerical data
df['Fare'].hist(bins=20, color='blue', edgecolor='black',figsize=(8, 6))
plt.title('Distribution of Fare')
plt.xlabel('Value Range')
plt.ylabel('Frequency')
plt.show()